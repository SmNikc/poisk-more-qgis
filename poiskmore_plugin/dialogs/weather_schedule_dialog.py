# -*- coding: utf-8 -*-
"""
–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏ —Ç–µ—á–µ–Ω–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ IAMSAR –∏ –º–µ—Ç–æ–¥–∏–∫–µ –ü–æ–∏—Å–∫-–ú–æ—Ä–µ
"""

from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QTableWidget, 
                             QTableWidgetItem, QPushButton, QGroupBox, QLabel,
                             QSpinBox, QDoubleSpinBox, QDateTimeEdit, QTabWidget,
                             QComboBox, QMessageBox, QHeaderView)
from PyQt5.QtCore import Qt, QDateTime, pyqtSignal
from PyQt5.QtGui import QFont
from datetime import datetime, timedelta
import math


class WeatherScheduleDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏ —Ç–µ—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    weather_updated = pyqtSignal(dict)  # –°–∏–≥–Ω–∞–ª –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    
    def __init__(self, incident_id=None, parent=None):
        super().__init__(parent)
        self.incident_id = incident_id
        self.setup_ui()
        self.load_existing_data()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        self.setWindowTitle("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–µ–æ—É—Å–ª–æ–≤–∏–π")
        self.setMinimumSize(900, 600)
        
        layout = QVBoxLayout()
        
        # –¢–∞–±—ã –¥–ª—è –≤–µ—Ç—Ä–∞ –∏ —Ç–µ—á–µ–Ω–∏–π
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞
        self.wind_tab = self.create_wind_tab()
        self.tabs.addTab(self.wind_tab, "üå¨Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ç—Ä–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ—á–µ–Ω–∏–π
        self.current_tab = self.create_current_tab()
        self.tabs.addTab(self.current_tab, "üåä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—á–µ–Ω–∏–π")
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥—Ä–µ–π—Ñ–∞
        self.drift_tab = self.create_drift_tab()
        self.tabs.addTab(self.drift_tab, "üìä –†–∞—Å—á–µ—Ç –¥—Ä–µ–π—Ñ–∞")
        
        layout.addWidget(self.tabs)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        
        self.btn_import = QPushButton("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ –ì–∏–¥—Ä–æ–º–µ—Ç–µ–æ")
        self.btn_import.clicked.connect(self.import_from_hydro)
        btn_layout.addWidget(self.btn_import)
        
        self.btn_calculate = QPushButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ASW/TWC")
        self.btn_calculate.clicked.connect(self.calculate_summary)
        btn_layout.addWidget(self.btn_calculate)
        
        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.btn_save.clicked.connect(self.save_data)
        btn_layout.addWidget(self.btn_save)
        
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.btn_cancel.clicked.connect(self.reject)
        btn_layout.addWidget(self.btn_cancel)
        
        layout.addLayout(btn_layout)
        
        self.setLayout(layout)
    
    def create_wind_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞"""
        widget = QGroupBox()
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ç—Ä–∞ (ASW - Average Surface Wind)</b>"))
        header_layout.addStretch()
        
        # –ü–µ—Ä–∏–æ–¥
        header_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥ —Å:"))
        self.wind_dt_from = QDateTimeEdit()
        self.wind_dt_from.setDisplayFormat("dd.MM.yyyy HH:mm UTC")
        self.wind_dt_from.setDateTime(QDateTime.currentDateTimeUtc())
        header_layout.addWidget(self.wind_dt_from)
        
        header_layout.addWidget(QLabel("–ø–æ:"))
        self.wind_dt_to = QDateTimeEdit()
        self.wind_dt_to.setDisplayFormat("dd.MM.yyyy HH:mm UTC")
        dt_to = QDateTime.currentDateTimeUtc().addSecs(24*3600)  # +24 —á–∞—Å–∞
        self.wind_dt_to.setDateTime(dt_to)
        header_layout.addWidget(self.wind_dt_to)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ç—Ä–∞
        self.wind_table = QTableWidget()
        self.wind_table.setColumnCount(7)
        self.wind_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è (UTC)", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n(–æ—Ç–∫—É–¥–∞, ¬∞)", "–°–∫–æ—Ä–æ—Å—Ç—å\n(–º/—Å)", 
            "–°–∫–æ—Ä–æ—Å—Ç—å\n(—É–∑–ª—ã)", "–ü–æ—Ä—ã–≤—ã\n(–º/—Å)", "–í—ã—Å–æ—Ç–∞\n(–º)", "–ò—Å—Ç–æ—á–Ω–∏–∫"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = self.wind_table.horizontalHeader()
        header.setStretchLastSection(True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
        table_btn_layout = QHBoxLayout()
        
        btn_add_wind = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        btn_add_wind.clicked.connect(lambda: self.add_wind_row())
        table_btn_layout.addWidget(btn_add_wind)
        
        btn_del_wind = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        btn_del_wind.clicked.connect(lambda: self.delete_selected_row(self.wind_table))
        table_btn_layout.addWidget(btn_del_wind)
        
        btn_interpolate = QPushButton("üìà –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å")
        btn_interpolate.clicked.connect(self.interpolate_wind)
        table_btn_layout.addWidget(btn_interpolate)
        
        table_btn_layout.addStretch()
        
        layout.addLayout(table_btn_layout)
        layout.addWidget(self.wind_table)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ ASW
        result_layout = QHBoxLayout()
        result_layout.addWidget(QLabel("<b>–°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä (ASW):</b>"))
        
        result_layout.addWidget(QLabel("–°–∫–æ—Ä–æ—Å—Ç—å:"))
        self.asw_speed_label = QLabel("0.0 –º/—Å")
        self.asw_speed_label.setStyleSheet("font-weight: bold; color: blue;")
        result_layout.addWidget(self.asw_speed_label)
        
        result_layout.addWidget(QLabel("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))
        self.asw_dir_label = QLabel("0¬∞")
        self.asw_dir_label.setStyleSheet("font-weight: bold; color: blue;")
        result_layout.addWidget(self.asw_dir_label)
        
        result_layout.addWidget(QLabel("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:"))
        self.asw_error_label = QLabel("¬±0.0 –º/—Å")
        self.asw_error_label.setStyleSheet("color: red;")
        result_layout.addWidget(self.asw_error_label)
        
        result_layout.addStretch()
        
        layout.addLayout(result_layout)
        
        widget.setLayout(layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        self.add_wind_row()
        self.add_wind_row(hours_offset=6)
        self.add_wind_row(hours_offset=12)
        self.add_wind_row(hours_offset=24)
        
        return widget
    
    def create_current_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ—á–µ–Ω–∏–π"""
        widget = QGroupBox()
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—á–µ–Ω–∏–π (TWC - Total Water Current)</b>"))
        header_layout.addStretch()
        
        # –ü–µ—Ä–∏–æ–¥
        header_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥ —Å:"))
        self.current_dt_from = QDateTimeEdit()
        self.current_dt_from.setDisplayFormat("dd.MM.yyyy HH:mm UTC")
        self.current_dt_from.setDateTime(QDateTime.currentDateTimeUtc())
        header_layout.addWidget(self.current_dt_from)
        
        header_layout.addWidget(QLabel("–ø–æ:"))
        self.current_dt_to = QDateTimeEdit()
        self.current_dt_to.setDisplayFormat("dd.MM.yyyy HH:mm UTC")
        dt_to = QDateTime.currentDateTimeUtc().addSecs(24*3600)
        self.current_dt_to.setDateTime(dt_to)
        header_layout.addWidget(self.current_dt_to)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ—á–µ–Ω–∏–π
        self.current_table = QTableWidget()
        self.current_table.setColumnCount(6)
        self.current_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è (UTC)", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n(–∫—É–¥–∞, ¬∞)", "–°–∫–æ—Ä–æ—Å—Ç—å\n(—É–∑–ª—ã)", 
            "–ì–ª—É–±–∏–Ω–∞\n(–º)", "–¢–∏–ø", "–ò—Å—Ç–æ—á–Ω–∏–∫"
        ])
        
        header = self.current_table.horizontalHeader()
        header.setStretchLastSection(True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
        table_btn_layout = QHBoxLayout()
        
        btn_add_current = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        btn_add_current.clicked.connect(lambda: self.add_current_row())
        table_btn_layout.addWidget(btn_add_current)
        
        btn_del_current = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        btn_del_current.clicked.connect(lambda: self.delete_selected_row(self.current_table))
        table_btn_layout.addWidget(btn_del_current)
        
        btn_tidal = QPushButton("üåä –ü—Ä–∏–ª–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
        btn_tidal.clicked.connect(self.load_tidal_data)
        table_btn_layout.addWidget(btn_tidal)
        
        table_btn_layout.addStretch()
        
        layout.addLayout(table_btn_layout)
        layout.addWidget(self.current_table)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ TWC
        result_layout = QHBoxLayout()
        result_layout.addWidget(QLabel("<b>–°—É–º–º–∞—Ä–Ω–æ–µ —Ç–µ—á–µ–Ω–∏–µ (TWC):</b>"))
        
        result_layout.addWidget(QLabel("–°–∫–æ—Ä–æ—Å—Ç—å:"))
        self.twc_speed_label = QLabel("0.0 —É–∑–ª–æ–≤")
        self.twc_speed_label.setStyleSheet("font-weight: bold; color: blue;")
        result_layout.addWidget(self.twc_speed_label)
        
        result_layout.addWidget(QLabel("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))
        self.twc_dir_label = QLabel("0¬∞")
        self.twc_dir_label.setStyleSheet("font-weight: bold; color: blue;")
        result_layout.addWidget(self.twc_dir_label)
        
        result_layout.addWidget(QLabel("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:"))
        self.twc_error_label = QLabel("¬±0.0 —É–∑–ª–æ–≤")
        self.twc_error_label.setStyleSheet("color: red;")
        result_layout.addWidget(self.twc_error_label)
        
        result_layout.addStretch()
        
        layout.addLayout(result_layout)
        
        widget.setLayout(layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        self.add_current_row()
        self.add_current_row(hours_offset=6)
        
        return widget
    
    def create_drift_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥—Ä–µ–π—Ñ–∞"""
        widget = QGroupBox()
        layout = QVBoxLayout()
        
        layout.addWidget(QLabel("<b>–†–∞—Å—á–µ—Ç –¥—Ä–µ–π—Ñ–∞ –ø–æ IAMSAR</b>"))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞
        obj_layout = QHBoxLayout()
        obj_layout.addWidget(QLabel("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:"))
        
        self.object_type = QComboBox()
        self.object_type.addItems([
            "–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–æ—Ç —Å —Ç–µ–Ω—Ç–æ–º",
            "–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–æ—Ç –±–µ–∑ —Ç–µ–Ω—Ç–∞",
            "–ß–µ–ª–æ–≤–µ–∫ –≤ —Å–ø–∞—Å–∂–∏–ª–µ—Ç–µ",
            "–ß–µ–ª–æ–≤–µ–∫ –±–µ–∑ —Å–ø–∞—Å–∂–∏–ª–µ—Ç–∞",
            "–ú–∞–ª–æ–µ —Å—É–¥–Ω–æ (<20–º)",
            "–°—Ä–µ–¥–Ω–µ–µ —Å—É–¥–Ω–æ (20-50–º)",
            "–ë–æ–ª—å—à–æ–µ —Å—É–¥–Ω–æ (>50–º)"
        ])
        self.object_type.currentIndexChanged.connect(self.update_leeway_coefficients)
        obj_layout.addWidget(self.object_type)
        
        obj_layout.addStretch()
        
        layout.addLayout(obj_layout)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–≤–µ—è
        coef_layout = QHBoxLayout()
        coef_layout.addWidget(QLabel("DWL slope:"))
        self.dwl_slope = QDoubleSpinBox()
        self.dwl_slope.setDecimals(4)
        self.dwl_slope.setValue(0.0110)
        coef_layout.addWidget(self.dwl_slope)
        
        coef_layout.addWidget(QLabel("intercept:"))
        self.dwl_intercept = QDoubleSpinBox()
        self.dwl_intercept.setDecimals(4)
        self.dwl_intercept.setValue(0.0)
        coef_layout.addWidget(self.dwl_intercept)
        
        coef_layout.addWidget(QLabel("CWL slope:"))
        self.cwl_slope = QDoubleSpinBox()
        self.cwl_slope.setDecimals(4)
        self.cwl_slope.setValue(0.0060)
        coef_layout.addWidget(self.cwl_slope)
        
        coef_layout.addWidget(QLabel("intercept:"))
        self.cwl_intercept = QDoubleSpinBox()
        self.cwl_intercept.setDecimals(4)
        self.cwl_intercept.setValue(0.0)
        coef_layout.addWidget(self.cwl_intercept)
        
        coef_layout.addStretch()
        
        layout.addLayout(coef_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥—Ä–µ–π—Ñ–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.drift_table = QTableWidget()
        self.drift_table.setColumnCount(9)
        self.drift_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–í–µ—Ç–µ—Ä\n(–º/—Å)", "DWL\n(—É–∑–ª—ã)", "CWL¬±\n(—É–∑–ª—ã)",
            "Leeway\n(—É–∑–ª—ã)", "TWC\n(—É–∑–ª—ã)", "–î—Ä–µ–π—Ñ\n(—É–∑–ª—ã)",
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n(¬∞)", "–°–º–µ—â–µ–Ω–∏–µ\n(–º–∏–ª–∏)"
        ])
        
        layout.addWidget(self.drift_table)
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_layout = QHBoxLayout()
        result_layout.addWidget(QLabel("<b>–ò—Ç–æ–≥–æ–≤—ã–π –¥—Ä–µ–π—Ñ:</b>"))
        
        result_layout.addWidget(QLabel("–°–º–µ—â–µ–Ω–∏–µ:"))
        self.total_drift_label = QLabel("0.0 –º–æ—Ä—Å–∫–∏—Ö –º–∏–ª—å")
        self.total_drift_label.setStyleSheet("font-weight: bold; color: red;")
        result_layout.addWidget(self.total_drift_label)
        
        result_layout.addWidget(QLabel("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))
        self.drift_dir_label = QLabel("0¬∞")
        self.drift_dir_label.setStyleSheet("font-weight: bold; color: red;")
        result_layout.addWidget(self.drift_dir_label)
        
        result_layout.addWidget(QLabel("–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞—Ç—É–º–æ–≤:"))
        self.divergence_label = QLabel("0.0 –º–∏–ª–∏")
        self.divergence_label.setStyleSheet("color: orange;")
        result_layout.addWidget(self.divergence_label)
        
        result_layout.addStretch()
        
        layout.addLayout(result_layout)
        
        widget.setLayout(layout)
        return widget
    
    def add_wind_row(self, hours_offset=0):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ç—Ä–∞"""
        row_count = self.wind_table.rowCount()
        self.wind_table.insertRow(row_count)
        
        # –í—Ä–µ–º—è
        dt = QDateTime.currentDateTimeUtc().addSecs(hours_offset * 3600)
        time_item = QTableWidgetItem(dt.toString("dd.MM HH:mm"))
        self.wind_table.setItem(row_count, 0, time_item)
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–æ—Ç–∫—É–¥–∞)
        dir_item = QTableWidgetItem("0")
        self.wind_table.setItem(row_count, 1, dir_item)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –º/—Å
        speed_ms_item = QTableWidgetItem("0.0")
        self.wind_table.setItem(row_count, 2, speed_ms_item)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —É–∑–ª—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç)
        speed_kn_item = QTableWidgetItem("0.0")
        self.wind_table.setItem(row_count, 3, speed_kn_item)
        
        # –ü–æ—Ä—ã–≤—ã
        gust_item = QTableWidgetItem("")
        self.wind_table.setItem(row_count, 4, gust_item)
        
        # –í—ã—Å–æ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        height_item = QTableWidgetItem("10")
        self.wind_table.setItem(row_count, 5, height_item)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        source_item = QTableWidgetItem("–†—É—á–Ω–æ–π –≤–≤–æ–¥")
        self.wind_table.setItem(row_count, 6, source_item)
    
    def add_current_row(self, hours_offset=0):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É —Ç–µ—á–µ–Ω–∏–π"""
        row_count = self.current_table.rowCount()
        self.current_table.insertRow(row_count)
        
        # –í—Ä–µ–º—è
        dt = QDateTime.currentDateTimeUtc().addSecs(hours_offset * 3600)
        time_item = QTableWidgetItem(dt.toString("dd.MM HH:mm"))
        self.current_table.setItem(row_count, 0, time_item)
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫—É–¥–∞)
        dir_item = QTableWidgetItem("0")
        self.current_table.setItem(row_count, 1, dir_item)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —É–∑–ª—ã
        speed_item = QTableWidgetItem("0.0")
        self.current_table.setItem(row_count, 2, speed_item)
        
        # –ì–ª—É–±–∏–Ω–∞
        depth_item = QTableWidgetItem("0")
        self.current_table.setItem(row_count, 3, depth_item)
        
        # –¢–∏–ø
        type_item = QTableWidgetItem("–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ")
        self.current_table.setItem(row_count, 4, type_item)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        source_item = QTableWidgetItem("–†—É—á–Ω–æ–π –≤–≤–æ–¥")
        self.current_table.setItem(row_count, 5, source_item)
    
    def delete_selected_row(self, table):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        current_row = table.currentRow()
        if current_row >= 0:
            table.removeRow(current_row)
    
    def interpolate_wind(self):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ç—Ä–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
        if self.wind_table.rowCount() < 2:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                               "–î–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏")
            return
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        QMessageBox.information(self, "–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è", 
                               "–§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    def update_leeway_coefficients(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–≤–µ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞"""
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ IAMSAR –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ N
        coefficients = {
            "–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–æ—Ç —Å —Ç–µ–Ω—Ç–æ–º": (0.0110, 0.0, 0.0060, 0.0),
            "–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–æ—Ç –±–µ–∑ —Ç–µ–Ω—Ç–∞": (0.0160, 0.0, 0.0100, 0.0),
            "–ß–µ–ª–æ–≤–µ–∫ –≤ —Å–ø–∞—Å–∂–∏–ª–µ—Ç–µ": (0.0120, 0.0, 0.0050, 0.0),
            "–ß–µ–ª–æ–≤–µ–∫ –±–µ–∑ —Å–ø–∞—Å–∂–∏–ª–µ—Ç–∞": (0.0100, 0.0, 0.0040, 0.0),
            "–ú–∞–ª–æ–µ —Å—É–¥–Ω–æ (<20–º)": (0.0420, 0.0, 0.0480, 0.0),
            "–°—Ä–µ–¥–Ω–µ–µ —Å—É–¥–Ω–æ (20-50–º)": (0.0330, 0.0, 0.0420, 0.0),
            "–ë–æ–ª—å—à–æ–µ —Å—É–¥–Ω–æ (>50–º)": (0.0280, 0.0, 0.0380, 0.0),
        }
        
        obj_type = self.object_type.currentText()
        if obj_type in coefficients:
            dwl_s, dwl_i, cwl_s, cwl_i = coefficients[obj_type]
            self.dwl_slope.setValue(dwl_s)
            self.dwl_intercept.setValue(dwl_i)
            self.cwl_slope.setValue(cwl_s)
            self.cwl_intercept.setValue(cwl_i)
    
    def calculate_summary(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ASW, TWC –∏ –¥—Ä–µ–π—Ñ"""
        # –†–∞—Å—á–µ—Ç ASW (—Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä)
        self.calculate_asw()
        
        # –†–∞—Å—á–µ—Ç TWC (—Å—É–º–º–∞—Ä–Ω–æ–µ —Ç–µ—á–µ–Ω–∏–µ)
        self.calculate_twc()
        
        # –†–∞—Å—á–µ—Ç –¥—Ä–µ–π—Ñ–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.calculate_drift()
    
    def calculate_asw(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä (ASW)"""
        if self.wind_table.rowCount() == 0:
            return
        
        # –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        sum_u = 0.0  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ E-W
        sum_v = 0.0  # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ N-S
        total_weight = 0.0
        
        for row in range(self.wind_table.rowCount()):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                speed_ms = float(self.wind_table.item(row, 2).text())
                dir_from = float(self.wind_table.item(row, 1).text())
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–∫—É–¥–∞"
                dir_to = (dir_from + 180) % 360
                
                # –†–∞–¥–∏–∞–Ω—ã
                dir_rad = math.radians(dir_to)
                
                # –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                u = speed_ms * math.sin(dir_rad)
                v = speed_ms * math.cos(dir_rad)
                
                # –í–µ—Å (–º–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
                weight = 1.0  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ - —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞
                
                sum_u += u * weight
                sum_v += v * weight
                total_weight += weight
                
            except (ValueError, AttributeError):
                continue
        
        if total_weight > 0:
            avg_u = sum_u / total_weight
            avg_v = sum_v / total_weight
            
            # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            asw_speed = math.sqrt(avg_u**2 + avg_v**2)
            asw_dir = math.degrees(math.atan2(avg_u, avg_v)) % 360
            
            # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - 10% –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏)
            asw_error = asw_speed * 0.1
            
            self.asw_speed_label.setText(f"{asw_speed:.1f} –º/—Å")
            self.asw_dir_label.setText(f"{asw_dir:.0f}¬∞")
            self.asw_error_label.setText(f"¬±{asw_error:.1f} –º/—Å")
    
    def calculate_twc(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ —Ç–µ—á–µ–Ω–∏–µ (TWC)"""
        if self.current_table.rowCount() == 0:
            return
        
        # –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        sum_u = 0.0
        sum_v = 0.0
        total_weight = 0.0
        
        for row in range(self.current_table.rowCount()):
            try:
                speed_kn = float(self.current_table.item(row, 2).text())
                dir_to = float(self.current_table.item(row, 1).text())
                
                dir_rad = math.radians(dir_to)
                
                u = speed_kn * math.sin(dir_rad)
                v = speed_kn * math.cos(dir_rad)
                
                weight = 1.0
                
                sum_u += u * weight
                sum_v += v * weight
                total_weight += weight
                
            except (ValueError, AttributeError):
                continue
        
        if total_weight > 0:
            avg_u = sum_u / total_weight
            avg_v = sum_v / total_weight
            
            twc_speed = math.sqrt(avg_u**2 + avg_v**2)
            twc_dir = math.degrees(math.atan2(avg_u, avg_v)) % 360
            twc_error = twc_speed * 0.15  # 15% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            
            self.twc_speed_label.setText(f"{twc_speed:.2f} —É–∑–ª–æ–≤")
            self.twc_dir_label.setText(f"{twc_dir:.0f}¬∞")
            self.twc_error_label.setText(f"¬±{twc_error:.2f} —É–∑–ª–æ–≤")
    
    def calculate_drift(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä–µ–π—Ñ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ IAMSAR"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥—Ä–µ–π—Ñ–∞
        self.drift_table.setRowCount(0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–≤–µ—è
        dwl_slope = self.dwl_slope.value()
        dwl_intercept = self.dwl_intercept.value()
        cwl_slope = self.cwl_slope.value()
        cwl_intercept = self.cwl_intercept.value()
        
        total_drift_nm = 0.0
        total_drift_u = 0.0
        total_drift_v = 0.0
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        for row in range(self.wind_table.rowCount()):
            try:
                # –í–µ—Ç–µ—Ä
                wind_speed_ms = float(self.wind_table.item(row, 2).text())
                wind_speed_kn = wind_speed_ms * 1.94384  # –º/—Å –≤ —É–∑–ª—ã
                
                # –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–∏–≤–µ—è
                dwl = dwl_slope * wind_speed_kn + dwl_intercept
                cwl = cwl_slope * wind_speed_kn + cwl_intercept  # ¬± –¥–ª—è –¥–≤—É—Ö –≤–µ—Ç–≤–µ–π
                
                # –°–∫–æ—Ä–æ—Å—Ç—å –ª–∏–≤–µ—è
                leeway_speed = math.sqrt(dwl**2 + cwl**2)
                
                # –¢–µ—á–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ TWC)
                twc_speed = 0.5  # —É–∑–ª—ã (–∑–∞–≥–ª—É—à–∫–∞)
                
                # –°—É–º–º–∞—Ä–Ω—ã–π –¥—Ä–µ–π—Ñ
                drift_speed = leeway_speed + twc_speed
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
                drift_row = self.drift_table.rowCount()
                self.drift_table.insertRow(drift_row)
                
                time_str = self.wind_table.item(row, 0).text() if self.wind_table.item(row, 0) else ""
                self.drift_table.setItem(drift_row, 0, QTableWidgetItem(time_str))
                self.drift_table.setItem(drift_row, 1, QTableWidgetItem(f"{wind_speed_ms:.1f}"))
                self.drift_table.setItem(drift_row, 2, QTableWidgetItem(f"{dwl:.3f}"))
                self.drift_table.setItem(drift_row, 3, QTableWidgetItem(f"¬±{cwl:.3f}"))
                self.drift_table.setItem(drift_row, 4, QTableWidgetItem(f"{leeway_speed:.2f}"))
                self.drift_table.setItem(drift_row, 5, QTableWidgetItem(f"{twc_speed:.2f}"))
                self.drift_table.setItem(drift_row, 6, QTableWidgetItem(f"{drift_speed:.2f}"))
                
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–∑–∞ 1 —á–∞—Å)
                drift_nm_per_hour = drift_speed * 1.0  # —É–∑–ª—ã * —á–∞—Å—ã = –º–∏–ª–∏
                total_drift_nm += drift_nm_per_hour
                
            except (ValueError, AttributeError):
                continue
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.total_drift_label.setText(f"{total_drift_nm:.1f} –º–æ—Ä—Å–∫–∏—Ö –º–∏–ª—å")
        
        # –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞—Ç—É–º–æ–≤ (–∏–∑-–∑–∞ ¬±CWL)
        divergence = abs(cwl) * self.wind_table.rowCount() * 2  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        self.divergence_label.setText(f"{divergence:.1f} –º–∏–ª–∏")
    
    def import_from_hydro(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥—É–ª—è –ì–∏–¥—Ä–æ–º–µ—Ç–µ–æ"""
        QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç", 
                               "–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ì–∏–¥—Ä–æ–º–µ—Ç–µ–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
                               "–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ GRIB/ECMWF.")
    
    def load_tidal_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        QMessageBox.information(self, "–ü—Ä–∏–ª–∏–≤—ã", 
                               "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–∏–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
                               "–ò—Å—Ç–æ—á–Ω–∏–∫: Admiralty Tide Tables")
    
    def load_existing_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"""
        if not self.incident_id:
            return
        
        # TODO: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
        # db.load_wind_schedule(self.incident_id)
        # db.load_current_schedule(self.incident_id)
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü
            wind_data = []
            for row in range(self.wind_table.rowCount()):
                wind_entry = {
                    'time': self.wind_table.item(row, 0).text(),
                    'direction': float(self.wind_table.item(row, 1).text()),
                    'speed_ms': float(self.wind_table.item(row, 2).text()),
                    'gust': self.wind_table.item(row, 4).text(),
                    'height': float(self.wind_table.item(row, 5).text()),
                    'source': self.wind_table.item(row, 6).text()
                }
                wind_data.append(wind_entry)
            
            current_data = []
            for row in range(self.current_table.rowCount()):
                current_entry = {
                    'time': self.current_table.item(row, 0).text(),
                    'direction': float(self.current_table.item(row, 1).text()),
                    'speed_kn': float(self.current_table.item(row, 2).text()),
                    'depth': float(self.current_table.item(row, 3).text()),
                    'type': self.current_table.item(row, 4).text(),
                    'source': self.current_table.item(row, 5).text()
                }
                current_data.append(current_entry)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∞–Ω–Ω—ã–º–∏
            weather_data = {
                'wind_schedule': wind_data,
                'current_schedule': current_data,
                'asw': {
                    'speed': self.asw_speed_label.text(),
                    'direction': self.asw_dir_label.text()
                },
                'twc': {
                    'speed': self.twc_speed_label.text(),
                    'direction': self.twc_dir_label.text()
                }
            }
            
            self.weather_updated.emit(weather_data)
            
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 
                                   "–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
