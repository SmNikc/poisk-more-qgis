# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PoiskMore Plugin
                                 A QGIS plugin
 Плагин для поисково-спасательных операций на море
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-01-01
        git sha              : $Format:%H$
        copyright            : (C) 2024 by MSRCC
        email                : info@msrcc.ru
 ***************************************************************************/
"""

import os
from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox

# Инициализация QGIS
from qgis.core import QgsApplication

# Импорт менеджера меню (из большого файла 48 Кб)
from .menu_structure import MenuManager

class PoiskMorePlugin:
    """Главный класс плагина ПОИСК-МОРЕ для QGIS"""

    def __init__(self, iface):
        """
        Конструктор плагина
        
        Args:
            iface: Интерфейс QGIS для взаимодействия с приложением
        """
        # Сохраняем ссылку на интерфейс QGIS
        self.iface = iface
        
        # Директория плагина
        self.plugin_dir = os.path.dirname(__file__)
        
        # Инициализация переводчика для локализации
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PoiskMore_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
            
        # Менеджер меню - будет создан в initGui
        self.menu_manager = None
        
        # Текущая операция
        self.current_operation = None
        
    def tr(self, message):
        """Получить переведенную строку"""
        return QCoreApplication.translate('PoiskMorePlugin', message)
        
    def initGui(self):
        """
        Инициализация GUI плагина
        Создание меню и панели инструментов
        """
        # Создаем менеджер меню с полной структурой
        self.menu_manager = MenuManager(self.iface, self.plugin_dir)
        self.menu_manager.create_menu_structure()
        
        # Подключаем сигналы менеджера меню
        self.menu_manager.operation_started.connect(self.on_operation_started)
        self.menu_manager.operation_closed.connect(self.on_operation_closed)
        self.menu_manager.menu_action_triggered.connect(self.on_menu_action)
        
        # Устанавливаем начальное состояние (нет активной операции)
        self.menu_manager.set_operation_active(False)
        
        # Показываем сообщение о загрузке плагина
        self.iface.messageBar().pushMessage(
            "ПОИСК-МОРЕ",
            "Плагин загружен и готов к работе",
            level=0,  # Info
            duration=3
        )
        
    def on_operation_started(self, operation_data):
        """
        Обработчик начала новой операции
        
        Args:
            operation_data: Данные операции
        """
        self.current_operation = operation_data
        
        # Обновляем интерфейс
        self.iface.messageBar().pushMessage(
            "Операция начата",
            f"Аварийный случай №{operation_data.get('case_number', 'N/A')}",
            level=0,
            duration=5
        )
        
        # Здесь можно добавить создание слоев на карте и т.д.
        self._create_operation_layers()
        
    def on_operation_closed(self):
        """
        Обработчик закрытия операции
        """
        if self.current_operation:
            case_number = self.current_operation.get('case_number', 'N/A')
            self.current_operation = None
            
            # Обновляем интерфейс
            self.iface.messageBar().pushMessage(
                "Операция закрыта",
                f"Операция №{case_number} закрыта",
                level=0,
                duration=5
            )
            
            # Здесь можно добавить очистку слоев и т.д.
            self._cleanup_operation_layers()
            
    def on_menu_action(self, action_name):
        """
        Обработчик действий меню
        
        Args:
            action_name: Имя действия
        """
        if action_name == 'show_operation_tab':
            # Показать вкладку операции
            self._show_operation_panel()
        elif action_name == 'update_statistics':
            # Обновить статистику
            self._update_statistics_display()
        # Добавьте другие обработчики по необходимости
            
    def _create_operation_layers(self):
        """
        Создать слои для текущей операции
        """
        # TODO: Реализовать создание слоев
        # - Слой исходных пунктов
        # - Слой районов поиска
        # - Слой маршрутов SRU
        # - Слой результатов
        pass
        
    def _cleanup_operation_layers(self):
        """
        Очистить слои операции
        """
        # TODO: Реализовать очистку слоев
        pass
        
    def _show_operation_panel(self):
        """
        Показать панель операции
        """
        # TODO: Реализовать панель операции
        pass
        
    def _update_statistics_display(self):
        """
        Обновить отображение статистики
        """
        if self.current_operation and 'statistics' in self.current_operation:
            stats = self.current_operation['statistics']
            message = (
                f"Площадь поиска: {stats.get('total_area', 0):.2f} км²\n"
                f"Обследовано: {stats.get('covered_area', 0):.2f} км²\n"
                f"POC: {stats.get('poc', 0):.1%} | "
                f"POD: {stats.get('pod', 0):.1%} | "
                f"POS: {stats.get('pos', 0):.1%}"
            )
            self.iface.messageBar().pushMessage(
                "Статистика операции",
                message,
                level=0,
                duration=10
            )
            
    def unload(self):
        """
        Выгрузка плагина
        Очистка ресурсов при отключении плагина
        """
        # Сохраняем текущую операцию если есть
        if self.current_operation:
            reply = QMessageBox.question(
                self.iface.mainWindow(),
                "Выгрузка плагина",
                "Есть активная операция. Сохранить перед выгрузкой?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )
            
            if reply == QMessageBox.Yes:
                # Сохраняем операцию
                if self.menu_manager:
                    self.menu_manager._save_operation_state()
                    
        # Очищаем меню и панели инструментов
        if self.menu_manager:
            self.menu_manager.cleanup()
            
        # Показываем сообщение о выгрузке
        self.iface.messageBar().pushMessage(
            "ПОИСК-МОРЕ",
            "Плагин выгружен",
            level=0,
            duration=3
        )