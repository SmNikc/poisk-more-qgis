#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
extract_chat_code_to_plugin.py ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ —á–∞—Ç–∞ –¥–ª—è QGIS –ø–ª–∞–≥–∏–Ω–∞
–í–µ—Ä—Å–∏—è 2.0 - —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

import argparse
import datetime
import os
import re
import shutil
import sys
import zipfile

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
FILE_HEADER_RE = re.compile(
    r'^\s*[-‚Äì‚Äî]{0,3}\s*FILE:\s*(.+?)\s*[-‚Äì‚Äî]{0,3}\s*$',
    re.IGNORECASE
)

def normalize_relpath(rel: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞."""
    rel = rel.strip().strip('"').strip("'")
    rel = re.sub(r'\s*(?:[-‚Äì‚Äî]{2,}.*|\)+)$', '', rel)
    rel = rel.replace('\\', '/').lstrip('./')
    return rel

def is_valid_path(path: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—É—Ç–∏."""
    if not path or path.strip() == '':
        return False, "–ø—É—Å—Ç–æ–π –ø—É—Ç—å"
   
    invalid_chars = '<>"|?*'
    for char in invalid_chars:
        if char in path:
            return False, f"—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª '{char}'"
   
    if re.search(r'[|\\]FILE:', path) or r'\s*' in path or '.+?' in path:
        return False, "—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"
   
    return True, ""

def parse_stream(text, verbose=False):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —á–∞—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º FILE.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: python–∫–æ–¥ (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏)
    –í–∫–ª—é—á–∞–µ—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤.
    """
    files = []
    invalid_files = []
    lines = text.splitlines()
   
    i = 0
    while i < len(lines):
        line = lines[i]
       
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
        match = FILE_HEADER_RE.match(line)
        if match:
            relpath = normalize_relpath(match.group(1))
           
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—É—Ç–∏
            is_valid, reason = is_valid_path(relpath)
            if not is_valid:
                invalid_files.append({
                    'line': i + 1,
                    'original_line': line.strip(),
                    'parsed_path': relpath,
                    'reason': reason
                })
                if verbose:
                    print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i + 1}: {relpath} ({reason})")
                i += 1
                continue
           
            if verbose:
                print(f"–ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {relpath} –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i + 1}")
           
            # –ò—â–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            content_lines = []
            i += 1
            
            # –ò—â–µ–º –∫–æ–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ FILE
            while i < len(lines):
                current_line = lines[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                if FILE_HEADER_RE.match(current_line):
                    break
                
                stripped = current_line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
                if (stripped.startswith('# –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:') or 
                    stripped.startswith('# –û—Ç—á–µ—Ç:') or
                    stripped.startswith('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:') or
                    stripped.startswith('"–î–∞"') or
                    '–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Å–µ:' in stripped):
                    i += 1
                    continue
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å python + –∫–æ–¥
                if stripped.startswith('python') and len(stripped) > 6:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ python
                    code_part = stripped[6:]  # –£–±–∏—Ä–∞–µ–º "python"
                    if code_part.strip():
                        content_lines.append(code_part)
                        if verbose:
                            print(f"  –ù–∞–π–¥–µ–Ω –∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ {i + 1}: {code_part[:50]}...")
                
                # –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å python, –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                elif (stripped and 
                      not stripped.startswith('#') and 
                      'python' not in stripped.lower() and
                      not stripped.startswith('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ') and
                      'FILE:' not in stripped):
                    content_lines.append(current_line)
                    if verbose and not content_lines:  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞
                        print(f"  –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞: {stripped[:50]}...")
                
                i += 1
           
            if content_lines:
                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
                while content_lines and not content_lines[0].strip():
                    content_lines.pop(0)
                while content_lines and not content_lines[-1].strip():
                    content_lines.pop()
                
                if content_lines:
                    content = '\n'.join(content_lines)
                    files.append((relpath, content))
                    if verbose:
                        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω {relpath}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, {len(content_lines)} —Å—Ç—Ä–æ–∫")
                else:
                    if verbose:
                        print(f"‚ùå –ö–æ–¥ –¥–ª—è {relpath} –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
            else:
                if verbose:
                    print(f"‚ùå –ù–µ—Ç –∫–æ–¥–∞ –ø–æ—Å–ª–µ {relpath}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    debug_start = max(0, i - 5)
                    debug_end = min(len(lines), i + 5)
                    print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∏ {debug_start}-{debug_end}):")
                    for j in range(debug_start, debug_end):
                        marker = " >>> " if j == i else "     "
                        print(f"  {marker}{j + 1}: {repr(lines[j])}")
        else:
            i += 1
   
    # –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
    unique_files = {}
    for rel, content in files:
        if rel in unique_files:
            if verbose:
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {rel}")
        unique_files[rel] = content

    files = list(unique_files.items())
    
    if verbose:
        print(f"\nüìä –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(files)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
   
    return files, invalid_files

def ensure_under_root(root: str, rel: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏."""
    root_abs = os.path.abspath(root)
    dest = os.path.abspath(os.path.join(root, rel))
    if not dest.startswith(root_abs):
        raise ValueError(f'Unsafe path traversal: {rel}')
    return dest

def write_files(files, root, eol='\n', encoding='utf-8', dry_run=False, backup=False, verbose=True):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫."""
    count = 0
    failed_files = []
   
    for rel, content in files:
        try:
            dest = ensure_under_root(root, rel)
            dir_path = os.path.dirname(dest)
           
            if dir_path:
                os.makedirs(dir_path, exist_ok=True)
           
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
            content = content.replace('\r\n', '\n').replace('\r', '\n')
            if eol == '\r\n':
                content = content.replace('\n', '\r\n')
           
            if dry_run:
                if verbose:
                    print(f'[DRY-RUN] Would write {dest} ({len(content)} bytes)')
                count += 1
                continue
           
            if backup and os.path.exists(dest):
                ts = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')
                backup_path = dest + f'.bak.{ts}'
                shutil.copy2(dest, backup_path)
                if verbose:
                    print(f'[BACKUP] {backup_path}')
           
            # metadata.txt –≤—Å–µ–≥–¥–∞ –≤ utf-8
            enc = 'utf-8' if os.path.basename(dest).lower() == 'metadata.txt' else encoding
           
            with open(dest, 'w', encoding=enc, newline='') as fh:
                fh.write(content)
           
            count += 1
            if verbose:
                print(f'[WROTE] {dest}')
               
        except (ValueError, OSError) as e:
            failed_files.append({'path': rel, 'error': str(e)})
            if verbose:
                print(f'[ERROR] {rel}: {e}')
   
    return count, failed_files

def ensure_package_markers(root, verbose=True):
    """–°–æ–∑–¥–∞–µ—Ç __init__.py –≤ –Ω—É–∂–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö."""
    python_dirs = ['alg', 'forms', 'utils', 'services', 'dialogs', 'models', 'controllers', 'events', 'db', 'esb']
    
    for subdir in python_dirs:
        subdir_path = os.path.join(root, subdir)
        if os.path.exists(subdir_path):
            init_path = os.path.join(subdir_path, '__init__.py')
            if not os.path.exists(init_path):
                try:
                    with open(init_path, 'w', encoding='utf-8') as fh:
                        fh.write('# Package marker\n')
                    if verbose:
                        print(f'[CREATED] {init_path}')
                except OSError as e:
                    if verbose:
                        print(f'[ERROR] {init_path}: {e}')

def make_zip(root, zip_out, topname=None, verbose=True):
    """–°–æ–±–∏—Ä–∞–µ—Ç ZIP –ø–ª–∞–≥–∏–Ω–∞."""
    if not topname:
        topname = os.path.basename(os.path.normpath(root))
   
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è ZIP –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        zip_dir = os.path.dirname(zip_out)
        if zip_dir and not os.path.exists(zip_dir):
            os.makedirs(zip_dir, exist_ok=True)
            
        with zipfile.ZipFile(zip_out, 'w', zipfile.ZIP_DEFLATED) as zf:
            base = os.path.abspath(root)
            file_count = 0
            
            for dirpath, dirnames, filenames in os.walk(root):
                for filename in filenames:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º backup —Ñ–∞–π–ª—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ
                    if (filename.endswith('.bak') or 
                        filename.startswith('.') or
                        filename.endswith('.pyc')):
                        continue
                        
                    filepath = os.path.join(dirpath, filename)
                    arcname = os.path.join(topname, os.path.relpath(filepath, base)).replace('\\', '/')
                    zf.write(filepath, arcname)
                    file_count += 1
                    
                    if verbose:
                        print(f'[ZIP] –î–æ–±–∞–≤–ª–µ–Ω–æ: {arcname}')
       
        if verbose:
            print(f'[ZIP] ‚úÖ –ì–æ—Ç–æ–≤–æ: {zip_out} ({file_count} —Ñ–∞–π–ª–æ–≤)')
            
    except Exception as e:
        print(f'[ERROR] ZIP: {e}')

def main():
    ap = argparse.ArgumentParser(
        description='–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –≤ QGIS –ø–ª–∞–≥–∏–Ω',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python extract_chat_code_to_plugin.py -i chat.txt -r /path/to/plugin --backup
  python extract_chat_code_to_plugin.py -i chat.txt -r /path/to/plugin --zip-out plugin.zip
        """
    )
    
    ap.add_argument('--input', '-i', default='-',
                    help='–§–∞–π–ª —á–∞—Ç–∞ –∏–ª–∏ "-" –¥–ª—è stdin')
    ap.add_argument('--root', '-r', required=True,
                    help='–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞')
    ap.add_argument('--encoding', default='utf-8',
                    help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: utf-8)')
    ap.add_argument('--eol', choices=['lf', 'crlf'], default='lf',
                    help='–û–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: lf)')
    ap.add_argument('--dry-run', action='store_true',
                    help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ')
    ap.add_argument('--backup', action='store_true',
                    help='–°–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (.bak)')
    ap.add_argument('--quiet', action='store_true',
                    help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º—É–º –≤—ã–≤–æ–¥–∞)')
    ap.add_argument('--verbose', action='store_true',
                    help='–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥')
    ap.add_argument('--zip-out',
                    help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É ZIP –∞—Ä—Ö–∏–≤—É')
    ap.add_argument('--zip-topname',
                    help='–ò–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –≤ ZIP (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–º—è root)')
   
    args = ap.parse_args()
    verbose = args.verbose and not args.quiet
   
    # –ß—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if args.input == '-':
        text = sys.stdin.read()
    else:
        if not os.path.exists(args.input):
            print(f'‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}', file=sys.stderr)
            sys.exit(2)
        try:
            with open(args.input, 'r', encoding='utf-8-sig') as fh:
                text = fh.read()
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {args.input}: {e}', file=sys.stderr)
            sys.exit(2)
    
    if verbose:
        print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {args.input}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∏–∑ —á–∞—Ç–∞
    files, invalid_files = parse_stream(text, verbose=verbose)
   
    # –û—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    if not args.quiet:
        print(f'\n=== –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(files)} ===')
        for rel, content in files:
            size_kb = len(content) / 1024
            print(f' ‚úÖ {rel} ({size_kb:.1f} KB)')
   
    if invalid_files and not args.quiet:
        print(f'\n=== –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(invalid_files)} ===')
        for invalid in invalid_files:
            print(f' ‚ùå –°—Ç—Ä–æ–∫–∞ {invalid["line"]}: {invalid["reason"]}')
            print(f'    {invalid["original_line"]}')
    
    if not files:
        print('‚ùå –§–∞–π–ª—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', file=sys.stderr)
        if not args.quiet:
            print('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: --- FILE: path/to/file.py ---')
        sys.exit(3)
    
    # –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
    eol_char = '\n' if args.eol == 'lf' else '\r\n'
    n, failed_files = write_files(
        files, args.root, 
        eol=eol_char, 
        encoding=args.encoding,
        dry_run=args.dry_run, 
        backup=args.backup, 
        verbose=verbose
    )
    
    if failed_files and not args.quiet:
        print(f'\n=== –û—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏: {len(failed_files)} ===')
        for failed in failed_files:
            print(f' ‚ùå {failed["path"]}: {failed["error"]}')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤
    if not args.dry_run:
        if verbose:
            print(f'\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–æ–≤...')
        ensure_package_markers(args.root, verbose=verbose)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
    if args.zip_out and not args.dry_run:
        if verbose:
            print(f'\nüóúÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...')
        make_zip(args.root, args.zip_out, topname=args.zip_topname, verbose=verbose)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    success_icon = "‚úÖ" if n == len(files) else "‚ö†Ô∏è"
    print(f'\n{success_icon} === –ò–¢–û–ì–û: {n} –∏–∑ {len(files)} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ===')
    
    if args.zip_out and not args.dry_run and os.path.exists(args.zip_out):
        zip_size = os.path.getsize(args.zip_out) / 1024
        print(f'üì¶ ZIP –∞—Ä—Ö–∏–≤: {args.zip_out} ({zip_size:.1f} KB)')

if __name__ == '__main__':
    main()