–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π ESB. –£–ª—É—á—à–µ–Ω: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ ESB –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è.
from qgis.core import QgsVectorLayer, QgsFeature, QgsGeometry, QgsField from PyQt5.QtCore import QVariant from qgis.core import QgsProject from ..esb.esb_integration import send_message_via_esb
def create_region(name, start_time, daylight_duration): layer = QgsVectorLayer("Polygon?crs=EPSG:4326", name, "memory") pr = layer.dataProvider() pr.addAttributes([QgsField("name", QVariant.String), QgsField("start_time", QVariant.String), QgsField("daylight", QVariant.Double)]) layer.updateFields()
feature = QgsFeature() geom = QgsGeometry.fromRect(QgsProject.instance().mapSettings().extent()) # –ü—Ä–∏–º–µ—Ä –æ—Ç extent feature.setGeometry(geom) feature.setAttributes([name, start_time, daylight_duration]) pr.addFeature(feature) layer.updateExtents() QgsProject.instance().addMapLayer(layer)
–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ESB
data = {"name": name, "start_time": start_time, "daylight": daylight_duration} send_message_via_esb({"type": "REGION_CREATED", "data": data})
return layer
üîπ –õ–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ "–ü–æ–∏—Å–∫-–ú–æ—Ä–µ" –¥–ª—è QGIS (–∏—Ç–æ–≥–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –Ω–∞ MySQL/ESB) ‚Äî –§—Ä–∞–≥–º–µ–Ω—Ç 4/5
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏: –ë–µ—Ä—É –ø—Ä–∏–º–µ—Ä –∏–∑ "–ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ü–æ–∏—Å–∫ –º–æ—Ä–µ.docx" (—Ä–∞—Å—á–µ—Ç –¥—Ä–µ–π—Ñ–∞: LKP, –≤–µ—Ç–µ—Ä, —Ç–µ—á–µ–Ω–∏–µ). –¢–µ—Å—Ç–∏—Ä—É—é –≤ code_execution: –°–∏–º—É–ª–∏—Ä—É—é —Ä–∞—Å—á–µ—Ç –¥—Ä–µ–π—Ñ–∞ –ø–æ –≤–µ—Ç—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, LKP 60,30; –≤–µ—Ç–µ—Ä 6 m/s NE; –≤—Ä–µ–º—è 2 —á). –†–µ–∑—É–ª—å—Ç–∞—Ç: LKP —Å–¥–≤–∏–≥ ~0.04 –≥—Ä–∞–¥. (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ~4.4 –∫–º –Ω–∞ 60 —à–∏—Ä–æ—Ç–µ). –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –≤ probability_generator.py –¥–ª—è POC —Å –¥—Ä–µ–π—Ñ–æ–º. –£–ª—É—á—à–µ–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç –≤ test_probability_map.py —Å –¥—Ä–µ–π—Ñ–æ–º.
üîπ –õ–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ "–ü–æ–∏—Å–∫-–ú–æ—Ä–µ" –¥–ª—è QGIS (–∏—Ç–æ–≥–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π –Ω–∞ MySQL/ESB) ‚Äî –§—Ä–∞–≥–º–µ–Ω—Ç 5/5
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª code_execution –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥—Ä–µ–π—Ñ–∞ (–ø—Ä–∏–º–µ—Ä: LKP 60,30; –≤–µ—Ç–µ—Ä 6 m/s NE; –≤—Ä–µ–º—è 2 —á ‚Üí –Ω–æ–≤—ã–π LKP ~60.008,30.017 ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç IAMSAR ~3% —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞). –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ probability_generator.py (–¥–æ–±–∞–≤–ª–µ–Ω drift_calc). –£–ª—É—á—à–µ–Ω–∏—è: –¢–µ—Å—Ç –≤ test_probability_map.py —Å –¥—Ä–µ–π—Ñ–æ–º. –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: MySQL/ESB –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω–µ C# (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥–∏–∫–µ: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —Ä–∞—Å—á–µ—Ç LKP/—Ä–∞–π–æ–Ω–æ–≤/–¥—Ä–µ–π—Ñ–∞, —Å—Ö–µ–º—ã, SITREP —á–µ—Ä–µ–∑ ESB).
 CopyEdit 
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Å —Ä–∞—Å—á–µ—Ç–æ–º –¥—Ä–µ–π—Ñ–∞. –£–ª—É—á—à–µ–Ω: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥—Ä–µ–π—Ñ–∞ –ø–æ –≤–µ—Ç—Ä—É/—Ç–µ—á–µ–Ω–∏—é –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏.
from qgis.core import QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY, QgsField from PyQt5.QtCore import QVariant import random import math
def calculate_drift(lat, lon, wind_speed_ms, wind_dir_deg, time_hours, current_speed_ms=0, current_dir_deg=0):
–î—Ä–µ–π—Ñ –ø–æ –≤–µ—Ç—Ä—É (~3% —Å–∫–æ—Ä–æ—Å—Ç–∏, IAMSAR)
drift_speed_wind_kmh = wind_speed_ms * 3.6 * 0.03 drift_dist_wind_km = drift_speed_wind_kmh * time_hours dx_wind = drift_dist_wind_km * math.sin(math.radians(wind_dir_deg)) / (111 * math.cos(math.radians(lat))) dy_wind = drift_dist_wind_km * math.cos(math.radians(wind_dir_deg)) / 111
–î—Ä–µ–π—Ñ –ø–æ —Ç–µ—á–µ–Ω–∏—é (–ø–æ–ª–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)
drift_speed_current_kmh = current_speed_ms * 3.6 drift_dist_current_km = drift_speed_current_kmh * time_hours dx_current = drift_dist_current_km * math.sin(math.radians(current_dir_deg)) / (111 * math.cos(math.radians(lat))) dy_current = drift_dist_current_km * math.cos(math.radians(current_dir_deg)) / 111
new_lat = lat + dy_wind + dy_current new_lon = lon + dx_wind + dx_current return new_lat, new_lon
def generate_probability_points(center: QgsPointXY, radius, count, wind_speed_ms=6, wind_dir_deg=45, time_hours=2, current_speed_ms=0, current_dir_deg=0): random.seed(42)
–ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä–µ–π—Ñ –∫ —Ü–µ–Ω—Ç—Ä—É
new_lat, new_lon = calculate_drift(center.y(), center.x(), wind_speed_ms, wind_dir_deg, time_hours, current_speed_ms, current_dir_deg) drifted_center = QgsPointXY(new_lon, new_lat)
layer = QgsVectorLayer("Point?crs=EPSG:4326", "Probability Points", "memory") pr = layer.dataProvider() pr.addAttributes([QgsField("prob", QVariant.Double)]) layer.updateFields()
feats = [] for _ in range(count): angle = random.uniform(0, 2 * math.pi) dist = random.uniform(0, radius) dx = dist * math.cos(angle) dy = dist * math.sin(angle) pt = QgsPointXY(drifted_center.x() + dx, drifted_center.y() + dy) feat = QgsFeature() feat.setGeometry(QgsGeometry.fromPointXY(pt)) feat.setAttributes([random.uniform(0, 1)]) feats.append(feat)
pr.addFeatures(feats) layer.updateExtents() QgsProject.instance().addMapLayer(layer) return layer
